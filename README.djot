# Dicshunary (Dictionary game)

based on the pen and paper "dictionary" game
described in notes

for notes on gameplay, data, and architecture ideas,
see `dictionary-game-2025-06-22.txt`

`server.js` is a deno server script

`client.html` is sent by the server to clients.
it's a single file with script and style tags.
relies on being served to get server url and connect

`test-client.js` is a console client deno script
for connecting to the server and testing it.
see the file comments for usage

## TASKS

### DOING

[ ] figure out automatic testing
    a test script to open multiple sockets conns to server
    and inspect values

### TO DO

[ ] game management vs player management split
[ ] put global data in a single dict var titled `global`
    or using a naming convention like GLOBAL_VAR
    though that's also used for constants.
    if i used a global object, i could restrict mutation
    to explicit function calls instead of worrying
    about accidental mutation
    ah, there's a convention of _name
    to not directly access such a field
    another option is overwriting get/set or the prototype,
    but staying clear of _name is easier and might be good enough
[ ] remove socket info when logging server state
    JSON stringify+parse with objCopy might truncate it
    and will be required anyway if that doesn't work
    just put a comment explaining why i'm doing it
[ ] server util function for mapping over players
    and returning new result instead of modifying input
    in messages to client, do id:name pairs
    in logs, concat socket info
	`eachPair(obj, func)` returns a new obj
[ ] use map for player lists to preserve order
    at least active player list
    or maybe use a list, since the splice api
    makes it much easier to reorder
    maybe list only for tracking order, not info
[ ] version server and clients
    // print before anything else
[ ] state transition to giving word
[ ] waiting queue for join/reconnect during reading/voting
    use playersPlaying + playersGone + playersWaiting
[ ] util function to send messages with filter
    for things like id, active status, etc.
    `msgSendAllBut(exceptions)` or something
[ ] main client: views, verification, and test-client logic
