# Dicshunary (Dictionary game)

based on the pen and paper "dictionary" game
described in notes

for notes on gameplay, data, and architecture ideas,
see `dictionary-game-2025-06-22.txt`

`server.js` is a deno server script

`client.html` is sent by the server to clients.
it's a single file with script and style tags.
relies on being served to get server url and connect

`test-client.js` is a console client deno script
for connecting to the server and testing it.
see the file comments for usage

## TODO/TEST

[x] reconnect
	[x] server
		[x] move id from disconn list to
		    players list with name and socket
		[x] send rejoin message to clients
	[x] client
		[x] add reconn message info to players
		[x] set id to server sent id in join-ack
		    server figures out if id is for old game
		    and generates new id

## done

[x] store and use name and id (changeID: lowtsxty)
[x] make id optional for joining (changeID: krsotrks)
[x] simple state machine to manage game state (changeID: nmyuymyn)
[x] resolve name collision with suffix (changeID: klqyusnu)
[x] disconnect (changeID: mktwznzx)
[x] server: refactor disconnects (changeID: klslsywr)

### later

[ ] server util function for mapping over players
    and returning new result instead of modifying input
    in messages to client, do id:name pairs
    in logs, concat socket info
	`eachPair(obj, func)` returns a new obj
[ ] server util function to disambiguate name
    move it out to improve readability of join handler
    and enable reuse in other places
[ ] server util function to copy object
    JSON.parse(JSON.stringify(obj)) is enough
    but makes everything verbose when used directly
[ ] version server and clients
	// print before anything else
[ ] state transition to giving word
[ ] waiting queue for join/reconnect during reading/voting
[ ] main client: views, verification, and test-client logic 
